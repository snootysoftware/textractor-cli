#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'textractor/cli.rb'
require 'rest-client'
require 'json'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do # Add args you want: |like,so|
    url = ENV['API_BASE_URL'] + '/textract'
    payload = {}
    glob = File.join(options['templates-path'], options['templates-pattern'])

    Dir[glob].each do |f|
      payload[f] = {content: File.read(f)}
    end

    payload = {templates: payload}
    payload[:absolute_keys] = true if options['absolute-keys']

    result = RestClient.post(url, payload.to_json, headers={})

    locale_file = options['locale-path']
    locale = YAML.load_file(locale_file)
    locale['en'] ||= {}
    
    JSON.parse(result).each do |k,v|
      raise "unexpected path \"#{k} in result!" unless payload[:templates].keys.include?(k)
      File.write(k, v["result"])
      key = k.sub(options['templates-path'],'')
             .sub(/^\//,'')
             .sub(/(\.html)?\.erb/,'').split('/')

      tmp = locale['en']
      key.each do |part|
        tmp[part] ||= {}
        tmp = tmp[part]
      end
      v["locale"].each {|kk,vv| tmp[kk] = vv }
    end
    File.write(locale_file, YAML.dump(locale))
  end

  # supplemental methods here

  # Declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  options['templates-pattern'] = "**/*.html.erb"
  on("--templates-pattern PATTERN", "Dir.glob() pattern used to match templates filenames")

  options['templates-path'] = "app/views"
  on("--templates-path PATH", "Template path")

  options['locale-path'] = "config/locales/en.yml"
  on("--locale-path PATH", "Path of target YAML locale file")

  on("--absolute-keys", "Generate `t('posts.index.title')` rather than `t('.title')`)")

  version Textractor::Cli::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
