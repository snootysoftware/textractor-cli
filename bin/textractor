#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'textractor/cli.rb'
require 'rest-client'
require 'json'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do
    locale_file = options['locale-path']
    exit_now!(1, "Error: could not find a locale file at: #{locale_file}") unless File.exist?(locale_file)

    url = ENV['API_BASE_URL'] || "https://textractor.snootysoftware.com"
    url += options['dry-run'] ? "/quote" : '/textract'
    payload = {}
    glob = File.join(options['templates-path'], options['templates-pattern'])

    Dir[glob].each do |f|
      payload[f] = {content: File.read(f)}
    end

    payload = { template: payload }
    payload[:absolute_keys] = true if options['absolute-keys']

    key = options['license-key'] || ENV['TEXTRACTOR_API_KEY']
    unless key
      exit_now!(1,"No license key found. Use --licence-key flag, ~/.textractor.rc or TEXTRACTOR_API_KEY environment variable. Visit https://textractor.snootysoftware.com to order one.")
    end

    puts "Processing..."
    headers = {
      'X-Auth-Token' => key
    }
    result = RestClient.post(url, payload.to_json, headers)

    if options['dry-run']
      result = JSON.parse(result.body)
      puts "Amount of templates to be processed: #{Dir[glob].size}"
      puts "Amount of t() calls: #{result["textract_calls"]}"
      puts "Amount of credits this will cost: #{result["credits_cost"]}"
      puts "Current credits: #{result["current_credits"]}"
      puts "Credits after textract: #{result["credits_after_textract"]}"
    else
      locale = YAML.load_file(locale_file)
      locale['en'] ||= {}

      total_calls = 0
      total_errors = 0
      JSON.parse(result.body).each do |k,v|
        raise "unexpected path \"#{k} in result!" unless payload[:template].keys.include?(k)
        File.write(k, v["result"]) unless v["error"]
        key = k.sub(options['templates-path'],'')
               .sub(/^\//,'')
               .sub(/(\.html)?\.erb/,'').split('/')

        tmp = locale['en']
        key.each do |part|
          tmp[part] ||= {}
          tmp = tmp[part]
        end
        (v["locale"] || {}).each {|kk,vv| tmp[kk] = vv }
        if v["error"]
          puts "\n Error processing \"#{k}\": #{v["error"]}"
          total_errors += 1
        else
          total_calls += v["textract_calls"]
        end
      end
      File.write(locale_file, YAML.dump(locale))
      puts "\n"
      puts "Processed #{Dir[glob].size} templates in total."
      puts "Total errors: #{total_errors}"
      puts "Total amount of string literals prepared for translation: #{total_calls}"
    end
  end

  options['templates-pattern'] = "**/*.html.erb"
  on("--templates-pattern PATTERN", "Dir.glob() pattern used to match templates filenames")

  options['templates-path'] = "app/views"
  on("--templates-path PATH", "Template path")

  options['locale-path'] = "config/locales/en.yml"
  on("--locale-path PATH", "Path of target YAML locale file")

  on("--absolute-keys", "Generate `t('posts.index.title')` rather than `t('.title')`)")

  on("--dry-run", "Get statistics and cost estimate from server without processing")

  on("--license-key KEY", "Get your key at https://textractor.snootysoftware.com")

  defaults_from_config_file '.textractor.rc'

  version Textractor::Cli::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
